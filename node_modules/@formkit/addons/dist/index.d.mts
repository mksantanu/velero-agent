import { FormKitPlugin, FormKitFrameworkContext, FormKitNode } from '@formkit/core';
import { AutoAnimateOptions } from '@formkit/auto-animate';
import { FormKitInputs, FormKitSlotData } from '@formkit/inputs';

/**
 * Adds auto-animate to each input automatically:
 *
 * @example
 *
 * ```javascript
 * import { createApp } from 'vue'
 * import App from 'App.vue'
 * import { createAutoAnimatePlugin } from '@formkit/addons'
 * import { plugin, defaultConfig } from '@formkit/vue'
 *
 * createApp(app).use(plugin, defaultPlugin({
 *   plugins: [
 *     createAutoAnimatePlugin({
 *       // optional config
 *       duration: 250,
 *       easing: 'ease-in-out',
 *       delay: 0,
 *     },
 *     {
 *       // optional animation targets object
 *       global: ['outer', 'inner'],
 *       form: ['form'],
 *       repeater: ['items'],
 *     })
 *   ]
 * }))
 * ```
 *
 * @param options - {@link https://github.com/formkit/auto-animate/blob/master/src/index.ts#L596 | AutoAnimateOptions }
 * @param animationTargets - A map of input types and an array of their sections that should be animated.
 *
 * @returns
 * {@link @formkit/core#FormKitPlugin | FormKitPlugin}
 *
 * @public
 */
declare function createAutoAnimatePlugin(options?: AutoAnimateOptions, animationTargets?: Record<string, string[]>): FormKitPlugin;

/**
 * Extend FormKitNode with Multi-step helper functions.
 */
declare module '@formkit/core' {
    interface FormKitNodeExtensions {
        next(): void;
        previous(): void;
        goTo(step: number | string): void;
    }
}
declare module '@formkit/inputs' {
    interface FormKitInputProps<Props extends FormKitInputs<Props>> {
        'multi-step': {
            type: 'multi-step';
            value?: Record<string, any>;
            allowIncomplete?: boolean;
            tabStyle?: 'tab' | 'progress';
            hideProgressLabels?: boolean;
            validStepIcon?: string;
            beforeStepChange?: BeforeStepChange;
        };
        step: {
            beforeStepChange?: BeforeStepChange;
            nextAttrs?: Record<string, any>;
            nextLabel?: string;
            previousAttrs?: Record<string, any>;
            previousLabel?: string;
            type: 'step';
            validStepIcon?: string;
            value?: Record<string, any>;
        };
    }
    interface FormKitInputSlots<Props extends FormKitInputs<Props>> {
        'multi-step': FormKitMultiStepSlots<Props>;
        step: FormKitStepSlots<Props>;
    }
}
/**
 * The node type that is augmented with next and previous and goTo functions.
 *
 * @public
 */
type FormKitMultiStepNode = FormKitNode & MultiStepNodeAdditions;
/**
 * Additional arguments that are added to the FormKitNode of a multistep input.
 *
 * @public
 */
interface MultiStepNodeAdditions {
    next: () => void;
    previous: () => void;
    goTo: (target: number | string) => void;
}
/**
 * @public
 */
interface MultiStepSlotData {
    steps: Array<FormKitMultiStepSlotData>;
    allowIncomplete?: boolean;
    tabStyle: 'tab' | 'progress';
    hideProgressLabels: boolean;
    validStepIcon: string | undefined;
    activeStep: string;
    beforeStepChange?: BeforeStepChange;
    node: FormKitMultiStepNode;
    handlers: FormKitFrameworkContext['handlers'] & MultiStepHandlers;
}
interface MultiStepHandlers {
    incrementStep: (delta: number, currentStep: FormKitFrameworkContext | undefined) => () => void;
    triggerStepValidations: (step: FormKitFrameworkContext) => void;
    showStepErrors: (step: FormKitFrameworkContext) => boolean | undefined;
    setActiveStep: (step: FormKitFrameworkContext) => (e?: Event) => void;
}
/**
 * Slot data unique to the step input.
 *
 * @public
 */
interface StepSlotData {
    beforeStepChange?: BeforeStepChange;
    makeActive: () => void;
    blockingCount: number;
    errorCount: number;
    hasBeenVisited: true | undefined;
    isActiveStep: boolean;
    isFirstStep: boolean;
    isLastStep: boolean;
    isValid: boolean;
    nextAttrs?: Record<string, any>;
    nextLabel?: string;
    ordered: boolean;
    previousAttrs?: Record<string, any>;
    previousLabel?: string;
    showStepErrors: boolean;
    stepName: string;
    steps: Array<FormKitMultiStepSlotData>;
    stepIndex: number;
    totalErrorCount: number;
    validStepIcon?: string;
    handlers: FormKitFrameworkContext['handlers'] & StepHandlers;
}
interface StepHandlers {
    incrementStep: (delta: number) => () => void;
    next: () => void;
    previous: () => void;
}
/**
 * @public
 */
interface FormKitMultiStepSlots<Props extends FormKitInputs<Props>> {
    multiStepOuter: FormKitSlotData<Props, MultiStepSlotData>;
    wrapper: FormKitSlotData<Props, MultiStepSlotData>;
    tabs: FormKitSlotData<Props, MultiStepSlotData>;
    tab: FormKitSlotData<Props, MultiStepSlotData>;
    tabLabel: FormKitSlotData<Props, MultiStepSlotData & {
        step: FormKitFrameworkContext;
        index: number;
    }>;
    badge: FormKitSlotData<Props, MultiStepSlotData & {
        step: FormKitFrameworkContext;
        index: number;
    }>;
    validStepIcon: FormKitSlotData<Props, MultiStepSlotData & {
        step: FormKitFrameworkContext;
        index: number;
    }>;
    steps: FormKitSlotData<Props, MultiStepSlotData>;
    default: FormKitSlotData<Props, MultiStepSlotData>;
}
/**
 * @public
 */
interface FormKitStepSlots<Props extends FormKitInputs<Props>> {
    stepInner: FormKitSlotData<Props, StepSlotData>;
    stepActions: FormKitSlotData<Props, StepSlotData>;
    stepNext: FormKitSlotData<Props, StepSlotData>;
    stepPrevious: FormKitSlotData<Props, StepSlotData>;
    default: FormKitSlotData<Props, StepSlotData>;
}
/**
 * The typing for the beforeStepChange function.
 *
 * @public
 */
interface BeforeStepChange {
    (data: StepChangeData): any;
}
interface StepChangeData<T = unknown> {
    currentStep: FormKitFrameworkContext<T>;
    targetStep: FormKitFrameworkContext<T>;
    delta: number;
}
/**
 * The typing for the slot data for a FormKit multi-step input.
 * @public
 */
type FormKitMultiStepSlotData = FormKitFrameworkContext<Record<string, any>> & StepSlotData;
/**
 * The options to be passed to {@link createMultiStepPlugin | createMultiStepPlugin}
 *
 * @public
 */
interface MultiStepOptions {
    allowIncomplete?: boolean;
    hideProgressLabels?: boolean;
    tabStyle?: 'tab' | 'progress';
}
/**
 * Creates a new multi-step plugin.
 *
 * @param options - The options of {@link MultiStepOptions | MultiStepOptions} to pass to the plugin
 *
 * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}
 *
 * @public
 */
declare function createMultiStepPlugin(options?: MultiStepOptions): FormKitPlugin;

/**
 * The options to be passed to {@link createFloatingLabelsPlugin | createFloatingLabelsPlugin}
 *
 * @public
 */
interface FloatingLabelsOptions {
    useAsDefault?: boolean;
}
/**
 * Creates a new floating label plugin.
 *
 * @param FloatingLabelsOptions - The options of {@link FloatingLabelsOptions | FloatingLabelsOptions} to pass to the plugin
 *
 * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}
 *
 * @public
 */
declare function createFloatingLabelsPlugin(FloatingLabelsOptions?: FloatingLabelsOptions): FormKitPlugin;

/**
 * The options to be passed to {@link createLocalStoragePlugin | createLocalStoragePlugin}
 *
 * @param prefix - The prefix to use for the local storage key
 * @param key - The key to use for the local storage entry, useful for scoping data per user
 * @param control - The form control to use enable or disable saving to localStorage. Must return a boolean value.
 * @param maxAge - The maximum age of the local storage entry in milliseconds
 * @param debounce - The debounce time in milliseconds to use when saving to localStorage
 * @param beforeSave - A function to call for modifying data before saving to localStorage
 * @param beforeLoad - A function to call for modifying data before loading from localStorage
 * @param clearOnSubmit - On submission of the form clear the local storage key. Defaults to true.
 *
 * @public
 */
interface LocalStorageOptions {
    prefix?: string;
    key?: string | number;
    control?: string;
    maxAge?: number;
    debounce?: number;
    beforeSave?: (payload: any) => any;
    beforeLoad?: (payload: any) => any;
    clearOnSubmit?: boolean;
}
/**
 * Creates a new save-to-local-storage plugin.
 *
 * @param LocalStorageOptions - The options of {@link LocalStorageOptions | LocalStorageOptions} to pass to the plugin
 *
 * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}
 *
 * @public
 */
declare function createLocalStoragePlugin(localStorageOptions?: LocalStorageOptions): FormKitPlugin;

/**
 * Creates a new auto-height textarea plugin.
 *
 * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}
 *
 * @public
 */
declare function createAutoHeightTextareaPlugin(): FormKitPlugin;

export { type BeforeStepChange, type FloatingLabelsOptions, type FormKitMultiStepNode, type FormKitMultiStepSlotData, type FormKitMultiStepSlots, type FormKitStepSlots, type LocalStorageOptions, type MultiStepHandlers, type MultiStepNodeAdditions, type MultiStepOptions, type MultiStepSlotData, type StepChangeData, type StepHandlers, type StepSlotData, createAutoAnimatePlugin, createAutoHeightTextareaPlugin, createFloatingLabelsPlugin, createLocalStoragePlugin, createMultiStepPlugin };
