"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubernetesFactory = void 0;
const client_node_1 = require("@kubernetes/client-node");
const load_from_enum_1 = require("./load-from.enum");
class KubernetesFactory {
    static create(options) {
        const kubeConfig = new client_node_1.KubeConfig();
        switch (options.loadFrom) {
            case load_from_enum_1.LoadFrom.FILE:
                kubeConfig.loadFromFile(options.opts.file, options.opts);
                if (options.opts?.context) {
                    kubeConfig.setCurrentContext(options.opts.context);
                }
                return kubeConfig;
            case load_from_enum_1.LoadFrom.CLUSTER:
                kubeConfig.loadFromCluster(options?.opts?.pathPrefix);
                if (options?.opts?.context) {
                    kubeConfig.setCurrentContext(options.opts.context);
                }
                return kubeConfig;
            case load_from_enum_1.LoadFrom.STRING:
                kubeConfig.loadFromString(options.opts.config, options.opts);
                if (options.opts?.context) {
                    kubeConfig.setCurrentContext(options.opts.context);
                }
                return kubeConfig;
            case load_from_enum_1.LoadFrom.DEFAULT:
                kubeConfig.loadFromDefault(options.opts, options?.opts?.contextFromStartingConfig);
                if (options?.opts?.context) {
                    kubeConfig.setCurrentContext(options.opts.context);
                }
                return kubeConfig;
            case load_from_enum_1.LoadFrom.OPTIONS:
                kubeConfig.loadFromOptions(options?.opts);
                if (options?.opts?.context) {
                    kubeConfig.setCurrentContext(options.opts.context);
                }
                return kubeConfig;
            case load_from_enum_1.LoadFrom.CLUSTER_AND_USER:
                kubeConfig.loadFromClusterAndUser(options.opts.cluster, options.opts.user);
                if (options.opts?.context) {
                    kubeConfig.setCurrentContext(options.opts.context);
                }
                return kubeConfig;
            default:
                kubeConfig.loadFromCluster();
                return kubeConfig;
        }
    }
}
exports.KubernetesFactory = KubernetesFactory;
