"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addE2e = addE2e;
const devkit_1 = require("@nx/devkit");
const web_1 = require("@nx/web");
const versions_1 = require("../../../utils/versions");
const has_rsbuild_plugin_1 = require("../../../utils/has-rsbuild-plugin");
async function addE2e(tree, options) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const hasPlugin = options.bundler === 'rsbuild'
        ? await (0, has_rsbuild_plugin_1.hasRsbuildPlugin)(tree, options.appProjectRoot)
        : nxJson.plugins?.find((p) => typeof p === 'string'
            ? p === '@nx/vite/plugin'
            : p.plugin === '@nx/vite/plugin');
    let e2eWebServerInfo;
    if (options.bundler === 'vite') {
        const { getViteE2EWebServerInfo } = (0, devkit_1.ensurePackage)('@nx/vite', versions_1.nxVersion);
        e2eWebServerInfo = await getViteE2EWebServerInfo(tree, options.projectName, (0, devkit_1.joinPathFragments)(options.appProjectRoot, `vite.config.${options.js ? 'js' : 'ts'}`), options.addPlugin, options.devServerPort ?? 4200);
    }
    else if (options.bundler === 'rsbuild') {
        (0, devkit_1.ensurePackage)('@nx/rsbuild', versions_1.nxVersion);
        const { getRsbuildE2EWebServerInfo } = await Promise.resolve().then(() => require('@nx/rsbuild/config-utils'));
        e2eWebServerInfo = await getRsbuildE2EWebServerInfo(tree, options.projectName, (0, devkit_1.joinPathFragments)(options.appProjectRoot, `rsbuild.config.${options.js ? 'js' : 'ts'}`), options.addPlugin, options.devServerPort ?? 4200);
    }
    switch (options.e2eTestRunner) {
        case 'cypress': {
            if (!hasPlugin) {
                await (0, web_1.webStaticServeGenerator)(tree, {
                    buildTarget: `${options.projectName}:build`,
                    targetName: 'serve-static',
                    spa: true,
                });
            }
            const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
            const packageJson = {
                name: options.e2eProjectName,
                version: '0.0.1',
                private: true,
            };
            if (!options.useProjectJson) {
                packageJson.nx = {
                    implicitDependencies: [options.projectName],
                };
            }
            else {
                (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
                    projectType: 'application',
                    root: options.e2eProjectRoot,
                    sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
                    targets: {},
                    tags: [],
                    implicitDependencies: [options.projectName],
                });
            }
            if (!options.useProjectJson || options.isUsingTsSolutionConfig) {
                (0, devkit_1.writeJson)(tree, (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'package.json'), packageJson);
            }
            const e2eTask = await configurationGenerator(tree, {
                ...options,
                project: options.e2eProjectName,
                directory: 'src',
                bundler: 'vite',
                skipFormat: true,
                devServerTarget: e2eWebServerInfo.e2eDevServerTarget,
                baseUrl: e2eWebServerInfo.e2eWebServerAddress,
                jsx: true,
                webServerCommands: {
                    default: e2eWebServerInfo.e2eWebServerCommand,
                    production: e2eWebServerInfo.e2eCiWebServerCommand,
                },
                ciWebServerCommand: e2eWebServerInfo.e2eCiWebServerCommand,
                ciBaseUrl: e2eWebServerInfo.e2eCiBaseUrl,
            });
            return e2eTask;
        }
        case 'playwright': {
            const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/playwright', versions_1.nxVersion);
            const packageJson = {
                name: options.e2eProjectName,
                version: '0.0.1',
                private: true,
            };
            if (!options.useProjectJson) {
                packageJson.nx = {
                    implicitDependencies: [options.projectName],
                };
            }
            else {
                (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
                    projectType: 'application',
                    root: options.e2eProjectRoot,
                    sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
                    targets: {},
                    implicitDependencies: [options.projectName],
                });
            }
            if (!options.useProjectJson || options.isUsingTsSolutionConfig) {
                (0, devkit_1.writeJson)(tree, (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'package.json'), packageJson);
            }
            const e2eTask = await configurationGenerator(tree, {
                ...options,
                project: options.e2eProjectName,
                skipFormat: true,
                skipPackageJson: options.skipPackageJson,
                directory: 'src',
                js: false,
                linter: options.linter,
                setParserOptionsProject: options.setParserOptionsProject,
                webServerCommand: e2eWebServerInfo.e2eCiWebServerCommand,
                webServerAddress: e2eWebServerInfo.e2eCiBaseUrl,
            });
            return e2eTask;
        }
        case 'none':
        default:
            return () => { };
    }
}
