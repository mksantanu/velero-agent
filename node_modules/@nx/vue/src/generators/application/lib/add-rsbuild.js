"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRsbuild = addRsbuild;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../../utils/versions");
async function addRsbuild(tree, options) {
    const tasks = [];
    (0, devkit_1.ensurePackage)('@nx/rsbuild', versions_1.nxVersion);
    const { initGenerator, configurationGenerator } = await Promise.resolve().then(() => require('@nx/rsbuild/generators'));
    const initTask = await initGenerator(tree, {
        skipPackageJson: options.skipPackageJson,
        addPlugin: true,
        skipFormat: true,
    });
    tasks.push(initTask);
    const rsbuildTask = await configurationGenerator(tree, {
        project: options.projectName,
        entry: `./src/main.ts`,
        tsConfig: './tsconfig.app.json',
        target: 'web',
        devServerPort: options.devServerPort ?? 4200,
    });
    tasks.push(rsbuildTask);
    const { addBuildPlugin, addHtmlTemplatePath, versions } = await Promise.resolve().then(() => require('@nx/rsbuild/config-utils'));
    const deps = { '@rsbuild/plugin-vue': versions.rsbuildPluginVueVersion };
    const pathToConfigFile = (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'rsbuild.config.ts');
    addBuildPlugin(tree, pathToConfigFile, '@rsbuild/plugin-vue', 'pluginVue');
    if (options.style === 'scss') {
        addBuildPlugin(tree, pathToConfigFile, '@rsbuild/plugin-sass', 'pluginSass');
        deps['@rsbuild/plugin-sass'] = versions.rsbuildPluginSassVersion;
    }
    else if (options.style === 'less') {
        addBuildPlugin(tree, pathToConfigFile, '@rsbuild/plugin-less', 'pluginLess');
        deps['@rsbuild/plugin-less'] = versions.rsbuildPluginLessVersion;
    }
    addHtmlTemplatePath(tree, pathToConfigFile, './index.html');
    tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, deps));
    return tasks;
}
