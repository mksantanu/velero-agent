"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGenerator = applicationGenerator;
exports.applicationGeneratorInternal = applicationGeneratorInternal;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const normalize_options_1 = require("./lib/normalize-options");
const init_1 = require("../init/init");
const add_linting_1 = require("../../utils/add-linting");
const add_e2e_1 = require("./lib/add-e2e");
const create_application_files_1 = require("./lib/create-application-files");
const add_vite_1 = require("./lib/add-vite");
const add_rsbuild_1 = require("./lib/add-rsbuild");
const create_ts_config_1 = require("../../utils/create-ts-config");
const ensure_dependencies_1 = require("../../utils/ensure-dependencies");
const log_show_project_command_1 = require("@nx/devkit/src/utils/log-show-project-command");
const ts_solution_setup_1 = require("@nx/js/src/utils/typescript/ts-solution-setup");
const sort_fields_1 = require("@nx/js/src/utils/package-json/sort-fields");
function applicationGenerator(tree, options) {
    return applicationGeneratorInternal(tree, {
        addPlugin: false,
        useProjectJson: true,
        ...options,
    });
}
async function applicationGeneratorInternal(tree, _options) {
    const tasks = [];
    const addTsPlugin = (0, ts_solution_setup_1.shouldConfigureTsSolutionSetup)(tree, _options.addPlugin, _options.useTsSolution);
    tasks.push(await (0, js_1.initGenerator)(tree, {
        ..._options,
        tsConfigName: _options.rootProject
            ? 'tsconfig.json'
            : 'tsconfig.base.json',
        skipFormat: true,
        addTsPlugin,
        formatter: _options.formatter,
        platform: 'web',
    }));
    const options = await (0, normalize_options_1.normalizeOptions)(tree, _options);
    // If we are using the new TS solution
    // We need to update the workspace file (package.json or pnpm-workspaces.yaml) to include the new project
    if (options.isUsingTsSolutionConfig) {
        await (0, ts_solution_setup_1.addProjectToTsSolutionWorkspace)(tree, options.appProjectRoot);
    }
    const nxJson = (0, devkit_1.readNxJson)(tree);
    options.addPlugin ??=
        process.env.NX_ADD_PLUGINS !== 'false' &&
            nxJson.useInferencePlugins !== false;
    const packageJson = {
        name: options.importPath,
        version: '0.0.1',
        private: true,
    };
    if (!options.useProjectJson) {
        if (options.projectName !== options.importPath) {
            packageJson.nx = { name: options.projectName };
        }
        if (options.parsedTags?.length) {
            packageJson.nx ??= {};
            packageJson.nx.tags = options.parsedTags;
        }
    }
    else {
        (0, devkit_1.addProjectConfiguration)(tree, options.projectName, {
            root: options.appProjectRoot,
            projectType: 'application',
            sourceRoot: `${options.appProjectRoot}/src`,
            tags: options.parsedTags?.length ? options.parsedTags : undefined,
            targets: {},
        });
    }
    if (!options.useProjectJson || options.isUsingTsSolutionConfig) {
        (0, devkit_1.writeJson)(tree, (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'package.json'), packageJson);
    }
    tasks.push(await (0, init_1.vueInitGenerator)(tree, {
        ...options,
        skipFormat: true,
    }));
    if (!options.skipPackageJson) {
        tasks.push((0, ensure_dependencies_1.ensureDependencies)(tree, options));
    }
    if (!options.rootProject) {
        (0, create_ts_config_1.extractTsConfigBase)(tree);
    }
    await (0, create_application_files_1.createApplicationFiles)(tree, options);
    tasks.push(await (0, add_linting_1.addLinting)(tree, {
        name: options.projectName,
        projectRoot: options.appProjectRoot,
        linter: options.linter ?? 'eslint',
        unitTestRunner: options.unitTestRunner,
        skipPackageJson: options.skipPackageJson,
        setParserOptionsProject: options.setParserOptionsProject,
        rootProject: options.rootProject,
        addPlugin: options.addPlugin,
        projectName: options.projectName,
    }, 'app'));
    if (options.bundler === 'rsbuild') {
        tasks.push(...(await (0, add_rsbuild_1.addRsbuild)(tree, options)));
        tasks.push(...(await (0, add_vite_1.addVitest)(tree, options)));
        tree.rename((0, devkit_1.joinPathFragments)(options.appProjectRoot, 'vite.config.ts'), (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'vitest.config.ts'));
    }
    else {
        tasks.push(await (0, add_vite_1.addVite)(tree, options));
    }
    tasks.push(await (0, add_e2e_1.addE2e)(tree, options));
    if (options.js)
        (0, devkit_1.toJS)(tree);
    if (options.isUsingTsSolutionConfig) {
        (0, ts_solution_setup_1.updateTsconfigFiles)(tree, options.appProjectRoot, 'tsconfig.app.json', {
            jsx: 'preserve',
            jsxImportSource: 'vue',
            module: 'esnext',
            moduleResolution: 'bundler',
            resolveJsonModule: true,
        }, options.linter === 'eslint'
            ? ['eslint.config.js', 'eslint.config.cjs', 'eslint.config.mjs']
            : undefined);
    }
    (0, sort_fields_1.sortPackageJsonFields)(tree, options.appProjectRoot);
    if (!options.skipFormat)
        await (0, devkit_1.formatFiles)(tree);
    tasks.push(() => {
        (0, log_show_project_command_1.logShowProjectCommand)(options.projectName);
    });
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.default = applicationGenerator;
