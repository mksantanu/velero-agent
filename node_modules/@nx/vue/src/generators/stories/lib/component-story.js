"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComponentStories = createComponentStories;
const devkit_1 = require("@nx/devkit");
const ensure_typescript_1 = require("@nx/js/src/utils/typescript/ensure-typescript");
const ts_solution_setup_1 = require("@nx/js/src/utils/typescript/ts-solution-setup");
const utils_1 = require("./utils");
const path_1 = require("path");
let tsModule;
function createComponentStories(host, { project, js, interactionTests }, componentPath) {
    if (!tsModule) {
        tsModule = (0, ensure_typescript_1.ensureTypescript)();
    }
    const proj = (0, devkit_1.readProjectConfiguration)(host, project);
    const sourceRoot = (0, ts_solution_setup_1.getProjectSourceRoot)(proj);
    const componentFilePath = (0, devkit_1.joinPathFragments)(sourceRoot, componentPath);
    const componentDirectory = componentFilePath.replace(componentFilePath.slice(componentFilePath.lastIndexOf('/')), '');
    const componentFileName = componentFilePath
        .slice(componentFilePath.lastIndexOf('/') + 1)
        .replace('.vue', '');
    const name = componentFileName;
    const contents = host.read(componentFilePath, 'utf-8');
    const propsObject = (0, utils_1.getDefinePropsObject)(contents);
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, `./files${js ? '/js' : '/ts'}`), (0, devkit_1.normalizePath)(componentDirectory), {
        tmpl: '',
        componentFileName: name,
        componentImportFileName: `${name}.vue`,
        props: (0, utils_1.createDefautPropsObject)(propsObject),
        componentName: (0, utils_1.camelCase)(name),
        interactionTests,
    });
    if (contents === null) {
        throw new Error(`Failed to read ${componentFilePath}`);
    }
}
