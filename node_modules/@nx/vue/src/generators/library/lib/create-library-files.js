"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLibraryFiles = createLibraryFiles;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const create_ts_config_1 = require("../../../utils/create-ts-config");
const path_1 = require("path");
function createLibraryFiles(host, options) {
    const relativePathToRootTsConfig = (0, js_1.getRelativePathToRootTsConfig)(host, options.projectRoot);
    const substitutions = {
        ...options,
        ...(0, devkit_1.names)(options.name),
        tmpl: '',
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot),
        fileName: options.fileName,
    };
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, '../files'), options.projectRoot, substitutions);
    if (!options.isUsingTsSolutionConfig &&
        options.useProjectJson &&
        (options.publishable || options.bundler !== 'none')) {
        (0, devkit_1.writeJson)(host, (0, devkit_1.joinPathFragments)(options.projectRoot, 'package.json'), {
            name: options.importPath ?? options.projectName,
            version: '0.0.1',
            main: './index.js',
            types: './index.d.ts',
            exports: {
                '.': {
                    types: './index.d.ts',
                    import: './index.mjs',
                    require: './index.js',
                },
            },
        });
    }
    if (options.unitTestRunner !== 'vitest') {
        host.delete(`${options.projectRoot}/tsconfig.spec.json`);
    }
    if (options.js) {
        (0, devkit_1.toJS)(host);
    }
    (0, create_ts_config_1.createTsConfig)(host, options.projectRoot, 'lib', options, relativePathToRootTsConfig);
}
